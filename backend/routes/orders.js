const express = require("express");
const router = express.Router();
const { sequelize } = require("../config/db");
const { auth } = require('../middleware/auth');

// üü¢ API: L·∫•y danh s√°ch ƒë∆°n h√†ng
router.get("/", auth, async (req, res) => {
  const transaction = await sequelize.transaction();
  try {
    let query = `
      SELECT 
        o.id,
        o.user_id,
        o.total_amount,
        o.status,
        o.shipping_address,
        o.phone,
        o.created_at,
        o.updated_at,
        o.customer_name,
        o.customer_email,
        o.notes,
        COALESCE(
          json_agg(
            json_build_object(
              'id', oi.id,
              'product_id', oi.product_id,
              'quantity', oi.quantity,
              'price', oi.price,
              'product_name', p.name
            )
          ) FILTER (WHERE oi.id IS NOT NULL),
          '[]'::json
        ) as items
      FROM orders o
      LEFT JOIN order_items oi ON o.id = oi.order_id
      LEFT JOIN products p ON oi.product_id = p.id
    `;

    // N·∫øu l√† admin, l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng
    // N·∫øu l√† user, ch·ªâ l·∫•y ƒë∆°n h√†ng c·ªßa user ƒë√≥
    if (req.user.role === 'admin') {
      query += ` GROUP BY o.id ORDER BY o.created_at DESC`;
    } else {
      query += ` WHERE o.user_id = :user_id GROUP BY o.id ORDER BY o.created_at DESC`;
    }

    const orders = await sequelize.query(query, {
      replacements: { user_id: req.user.id },
      type: sequelize.QueryTypes.SELECT,
      transaction
    });
    
    await transaction.commit();
    
    res.json({
      success: true,
      data: orders
    });
  } catch (err) {
    await transaction.rollback();
    console.error("üö® L·ªói khi l·∫•y ƒë∆°n h√†ng:", err.message);
    res.status(500).json({ 
      success: false,
      message: err.message || 'L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng'
    });
  }
});

// üü¢ API: ƒê·∫∑t h√†ng (Y√™u c·∫ßu ƒëƒÉng nh·∫≠p)
router.post("/", auth, async (req, res) => {
  const transaction = await sequelize.transaction();
  try {
    const {
      items,
      customer_name,
      customer_email,
      phone,
      shipping_address,
      notes,
      total_amount
    } = req.body;
    const userId = req.user ? req.user.id : null;

    console.log("üì¶ D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c:", {
      items,
      customer_name,
      customer_email,
      phone,
      shipping_address,
      notes,
      total_amount,
      userId
    });

    // Validate required fields
    if (!items || !Array.isArray(items) || items.length === 0) {
      throw new Error('Danh s√°ch s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
    }

    if (!customer_name || !customer_email || !phone || !shipping_address) {
      throw new Error('Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc');
    }

    // Validate phone number format
    const phoneRegex = /^[0-9]{10,11}$/;
    if (!phoneRegex.test(phone)) {
      throw new Error('S·ªë ƒëi·ªán tho·∫°i kh√¥ng h·ª£p l·ªá');
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(customer_email)) {
      throw new Error('Email kh√¥ng h·ª£p l·ªá');
    }

    // T√≠nh t·ªïng ti·ªÅn v√† ki·ªÉm tra s·∫£n ph·∫©m
    let calculatedTotalAmount = 0;
    const sanitizedItems = [];

    for (const item of items) {
      if (!item.product_id || !item.quantity || item.quantity <= 0) {
        throw new Error('Th√¥ng tin s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
      }

      // L·∫•y th√¥ng tin s·∫£n ph·∫©m t·ª´ database
      const [product] = await sequelize.query(
        'SELECT id, price FROM products WHERE id = :product_id AND is_available = true',
        {
          replacements: { product_id: parseInt(item.product_id) },
          type: sequelize.QueryTypes.SELECT,
          transaction
        }
      );

      if (!product) {
        throw new Error(`S·∫£n ph·∫©m ID ${item.product_id} kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ ng·ª´ng kinh doanh`);
      }

      const itemPrice = parseFloat(product.price);
      const itemQuantity = parseInt(item.quantity);

      if (isNaN(itemPrice) || isNaN(itemQuantity)) {
        throw new Error('Gi√° ho·∫∑c s·ªë l∆∞·ª£ng s·∫£n ph·∫©m kh√¥ng h·ª£p l·ªá');
      }

      calculatedTotalAmount += itemPrice * itemQuantity;
      sanitizedItems.push({
        product_id: parseInt(item.product_id),
        quantity: itemQuantity,
        price: itemPrice
      });
    }

    // Ki·ªÉm tra t·ªïng ti·ªÅn
    const totalAmount = parseFloat(total_amount);
    if (isNaN(totalAmount)) {
      throw new Error('T·ªïng ti·ªÅn kh√¥ng h·ª£p l·ªá');
    }

    if (Math.abs(calculatedTotalAmount - totalAmount) > 0.01) {
      throw new Error('T·ªïng ti·ªÅn ƒë∆°n h√†ng kh√¥ng kh·ªõp');
    }

    // T·∫°o ƒë∆°n h√†ng
    const [orderResult] = await sequelize.query(
      `INSERT INTO orders (
        user_id, 
        total_amount, 
        status, 
        shipping_address, 
        phone,
        customer_name,
        customer_email,
        notes,
        created_at,
        updated_at
      ) VALUES (
        :user_id, 
        :total_amount, 
        'pending', 
        :shipping_address, 
        :phone,
        :customer_name,
        :customer_email,
        :notes,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
      ) RETURNING id`,
      {
        replacements: {
          user_id: parseInt(userId),
          total_amount: calculatedTotalAmount,
          shipping_address,
          phone,
          customer_name,
          customer_email,
          notes: notes || null
        },
        type: sequelize.QueryTypes.INSERT,
        transaction
      }
    );

    const orderId = orderResult[0].id;
    console.log("üìù ƒê√£ t·∫°o ƒë∆°n h√†ng:", orderId);

    // Th√™m chi ti·∫øt ƒë∆°n h√†ng
    for (const item of sanitizedItems) {
      await sequelize.query(
        `INSERT INTO order_items (
          order_id, 
          product_id, 
          quantity, 
          price,
          created_at
        ) VALUES (
          :order_id, 
          :product_id, 
          :quantity, 
          :price,
          CURRENT_TIMESTAMP
        )`,
        {
          replacements: {
            order_id: orderId,
            product_id: item.product_id,
            quantity: item.quantity,
            price: item.price
          },
          type: sequelize.QueryTypes.INSERT,
          transaction
        }
      );
    }

    await transaction.commit();

    // L·∫•y th√¥ng tin ƒë∆°n h√†ng v·ª´a t·∫°o
    const [orderDetails] = await sequelize.query(
      `SELECT o.*, 
        json_agg(
          json_build_object(
            'id', oi.id,
            'product_id', oi.product_id,
            'quantity', oi.quantity,
            'price', oi.price,
            'product_name', p.name
          )
        ) as items
      FROM orders o
      LEFT JOIN order_items oi ON o.id = oi.order_id
      LEFT JOIN products p ON oi.product_id = p.id
      WHERE o.id = :order_id
      GROUP BY o.id`,
      {
        replacements: { order_id: orderId },
        type: sequelize.QueryTypes.SELECT
      }
    );

    res.json({
      success: true,
      message: 'ƒê·∫∑t h√†ng th√†nh c√¥ng',
      data: orderDetails
    });
  } catch (err) {
    await transaction.rollback();
    console.error("üö® L·ªói khi ƒë·∫∑t h√†ng:", err.message);
    res.status(500).json({
      success: false,
      message: err.message || 'L·ªói khi ƒë·∫∑t h√†ng'
    });
  }
});

// üü¢ API: C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
router.put("/:id/status", auth, async (req, res) => {
  const transaction = await sequelize.transaction();
  try {
    const { id } = req.params;
    const { status } = req.body;

    // Ki·ªÉm tra quy·ªÅn admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng'
      });
    }

    // Ki·ªÉm tra tr·∫°ng th√°i h·ª£p l·ªá
    const validStatuses = ['pending', 'processing', 'completed', 'cancelled'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: 'Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá'
      });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const [result] = await sequelize.query(
      `UPDATE orders 
       SET status = :status, 
           updated_at = CURRENT_TIMESTAMP 
       WHERE id = :id 
       RETURNING *`,
      {
        replacements: { id, status },
        type: sequelize.QueryTypes.UPDATE,
        transaction
      }
    );

    if (!result || result.length === 0) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng'
      });
    }

    await transaction.commit();

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng',
      data: result[0]
    });
  } catch (err) {
    await transaction.rollback();
    console.error("üö® L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:", err.message);
    res.status(500).json({ 
      success: false,
      message: err.message || 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng'
    });
  }
});

// üü¢ API: L·∫•y danh s√°ch ƒë∆°n h√†ng cho admin
router.get("/admin", auth, async (req, res) => {
  const transaction = await sequelize.transaction();
  try {
    // Ki·ªÉm tra quy·ªÅn admin
    if (req.user.role !== 'admin') {
      return res.status(403).json({
        success: false,
        message: 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p'
      });
    }

    const orders = await sequelize.query(`
      SELECT 
        o.id,
        o.user_id,
        o.total_amount,
        o.status,
        o.shipping_address,
        o.phone,
        o.created_at,
        o.updated_at,
        o.customer_name,
        o.customer_email,
        o.notes,
        COALESCE(
          json_agg(
            json_build_object(
              'id', oi.id,
              'product_id', oi.product_id,
              'quantity', oi.quantity,
              'price', oi.price,
              'product_name', p.name
            )
          ) FILTER (WHERE oi.id IS NOT NULL),
          '[]'::json
        ) as items
      FROM orders o
      LEFT JOIN order_items oi ON o.id = oi.order_id
      LEFT JOIN products p ON oi.product_id = p.id
      GROUP BY o.id
      ORDER BY o.created_at DESC
    `, {
      type: sequelize.QueryTypes.SELECT,
      transaction
    });
    
    await transaction.commit();
    
    res.json({
      success: true,
      data: orders
    });
  } catch (err) {
    await transaction.rollback();
    console.error("üö® L·ªói khi l·∫•y ƒë∆°n h√†ng:", err.message);
    res.status(500).json({ 
      success: false,
      message: err.message || 'L·ªói khi l·∫•y danh s√°ch ƒë∆°n h√†ng'
    });
  }
});

module.exports = router;
